version: '3'

services:

  postgresqldb:
    container_name: postgresqldb
    image: postgres
    environment:
      POSTGRES_DB: ${NAME_db}
      POSTGRES_PASSWORD: ${PASSWORD_db}
    ports:
      - "5433:5432"
    networks:
      - ecom_network
    # volumes:
    #   - ./postgres_v:/var/lib/postgresql/data
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 10s
        timeout: 30s
        retries: 5

  redis:
    container_name: red
    restart: always
    image: redis
    ports:
      - "6379:6379"
    networks:
      - ecom_network


  ecomapp_image:
    container_name: ecomapp
    image: ecomapp_image
    restart: always
    build: .
    ports:
      - 8000:8000
    environment:
      RED: 12
      NAME_db: ${NAME_db}
      PASSWORD_db: ${PASSWORD_db}
      USER_db: ${USER_db}
      HOST_db: ${HOST_db}

      SECRET_KEY: ${SECRET_KEY}
      DEBUG : ${DEBUG}

      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS}

      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_STORAGE_BUCKET_NAME:  ${AWS_STORAGE_BUCKET_NAME}

      
    depends_on:
      postgresqldb:
        condition: service_healthy
      # - redis
    networks:
      - ecom_network
    

networks:
  ecom_network:
    driver: bridge